// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// ArangoSearchAnalyzer is an autogenerated mock type for the ArangoSearchAnalyzer type
type ArangoSearchAnalyzer struct {
	mock.Mock
}

// Database provides a mock function with given fields:
func (_m *ArangoSearchAnalyzer) Database() driver.Database {
	ret := _m.Called()

	var r0 driver.Database
	if rf, ok := ret.Get(0).(func() driver.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Database)
		}
	}

	return r0
}

// Definition provides a mock function with given fields:
func (_m *ArangoSearchAnalyzer) Definition() driver.ArangoSearchAnalyzerDefinition {
	ret := _m.Called()

	var r0 driver.ArangoSearchAnalyzerDefinition
	if rf, ok := ret.Get(0).(func() driver.ArangoSearchAnalyzerDefinition); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(driver.ArangoSearchAnalyzerDefinition)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *ArangoSearchAnalyzer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Properties provides a mock function with given fields:
func (_m *ArangoSearchAnalyzer) Properties() driver.ArangoSearchAnalyzerProperties {
	ret := _m.Called()

	var r0 driver.ArangoSearchAnalyzerProperties
	if rf, ok := ret.Get(0).(func() driver.ArangoSearchAnalyzerProperties); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(driver.ArangoSearchAnalyzerProperties)
	}

	return r0
}

// Remove provides a mock function with given fields: ctx, force
func (_m *ArangoSearchAnalyzer) Remove(ctx context.Context, force bool) error {
	ret := _m.Called(ctx, force)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *ArangoSearchAnalyzer) Type() driver.ArangoSearchAnalyzerType {
	ret := _m.Called()

	var r0 driver.ArangoSearchAnalyzerType
	if rf, ok := ret.Get(0).(func() driver.ArangoSearchAnalyzerType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(driver.ArangoSearchAnalyzerType)
	}

	return r0
}

// UniqueName provides a mock function with given fields:
func (_m *ArangoSearchAnalyzer) UniqueName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
