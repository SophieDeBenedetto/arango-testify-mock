// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// DatabaseArangoSearchAnalyzers is an autogenerated mock type for the DatabaseArangoSearchAnalyzers type
type DatabaseArangoSearchAnalyzers struct {
	mock.Mock
}

// Analyzer provides a mock function with given fields: ctx, name
func (_m *DatabaseArangoSearchAnalyzers) Analyzer(ctx context.Context, name string) (driver.ArangoSearchAnalyzer, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.ArangoSearchAnalyzer
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.ArangoSearchAnalyzer); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ArangoSearchAnalyzer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Analyzers provides a mock function with given fields: ctx
func (_m *DatabaseArangoSearchAnalyzers) Analyzers(ctx context.Context) ([]driver.ArangoSearchAnalyzer, error) {
	ret := _m.Called(ctx)

	var r0 []driver.ArangoSearchAnalyzer
	if rf, ok := ret.Get(0).(func(context.Context) []driver.ArangoSearchAnalyzer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.ArangoSearchAnalyzer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnsureAnalyzer provides a mock function with given fields: ctx, analyzer
func (_m *DatabaseArangoSearchAnalyzers) EnsureAnalyzer(ctx context.Context, analyzer driver.ArangoSearchAnalyzerDefinition) (bool, driver.ArangoSearchAnalyzer, error) {
	ret := _m.Called(ctx, analyzer)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, driver.ArangoSearchAnalyzerDefinition) bool); ok {
		r0 = rf(ctx, analyzer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 driver.ArangoSearchAnalyzer
	if rf, ok := ret.Get(1).(func(context.Context, driver.ArangoSearchAnalyzerDefinition) driver.ArangoSearchAnalyzer); ok {
		r1 = rf(ctx, analyzer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(driver.ArangoSearchAnalyzer)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, driver.ArangoSearchAnalyzerDefinition) error); ok {
		r2 = rf(ctx, analyzer)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
