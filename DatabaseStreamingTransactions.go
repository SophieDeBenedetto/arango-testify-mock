// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// DatabaseStreamingTransactions is an autogenerated mock type for the DatabaseStreamingTransactions type
type DatabaseStreamingTransactions struct {
	mock.Mock
}

// AbortTransaction provides a mock function with given fields: ctx, tid, opts
func (_m *DatabaseStreamingTransactions) AbortTransaction(ctx context.Context, tid driver.TransactionID, opts *driver.AbortTransactionOptions) error {
	ret := _m.Called(ctx, tid, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionID, *driver.AbortTransactionOptions) error); ok {
		r0 = rf(ctx, tid, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeginTransaction provides a mock function with given fields: ctx, cols, opts
func (_m *DatabaseStreamingTransactions) BeginTransaction(ctx context.Context, cols driver.TransactionCollections, opts *driver.BeginTransactionOptions) (driver.TransactionID, error) {
	ret := _m.Called(ctx, cols, opts)

	var r0 driver.TransactionID
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionCollections, *driver.BeginTransactionOptions) driver.TransactionID); ok {
		r0 = rf(ctx, cols, opts)
	} else {
		r0 = ret.Get(0).(driver.TransactionID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, driver.TransactionCollections, *driver.BeginTransactionOptions) error); ok {
		r1 = rf(ctx, cols, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTransaction provides a mock function with given fields: ctx, tid, opts
func (_m *DatabaseStreamingTransactions) CommitTransaction(ctx context.Context, tid driver.TransactionID, opts *driver.CommitTransactionOptions) error {
	ret := _m.Called(ctx, tid, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionID, *driver.CommitTransactionOptions) error); ok {
		r0 = rf(ctx, tid, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionStatus provides a mock function with given fields: ctx, tid
func (_m *DatabaseStreamingTransactions) TransactionStatus(ctx context.Context, tid driver.TransactionID) (driver.TransactionStatusRecord, error) {
	ret := _m.Called(ctx, tid)

	var r0 driver.TransactionStatusRecord
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionID) driver.TransactionStatusRecord); ok {
		r0 = rf(ctx, tid)
	} else {
		r0 = ret.Get(0).(driver.TransactionStatusRecord)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, driver.TransactionID) error); ok {
		r1 = rf(ctx, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
